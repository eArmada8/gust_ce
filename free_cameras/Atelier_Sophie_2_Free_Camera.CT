<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Free Camera (Num 0 Toggle)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(speedModifier,8)
speedModifier:
dd (float)3
globalalloc(useMouse,8)
useMouse:
dd (float)1 // 1 to use mouse, 0 to not use mouse
globalalloc(mouseSensitivity,8)
mouseSensitivity:
dd (float)8

aobscanmodule(detachcamera_aob,Atelier_Sophie_2.exe,41 0F 11 46 10 0F) // should be unique
aobscanmodule(detachcamera_aob2,Atelier_Sophie_2.exe,0F 11 46 10 0F 10 44 24 30 0F 11 46 20 E8 C6) // should be unique
aobscanmodule(detachcamera_aob3,Atelier_Sophie_2.exe,0F 11 46 10 0F 10 44 24 50) // should be unique
alloc(newmem,$1000,detachcamera_aob)

label(memorybuffer)

registersymbol(detachcamera_aob)
registersymbol(detachcamera_aob2)
registersymbol(detachcamera_aob3)
registersymbol(memorybuffer)

newmem:

memorybuffer:
  dq #0

detachcamera_aob:
  db 90 90 90 90 90 0F 10 45 88 41 90 90 90 90

detachcamera_aob2:
  db 90 90 90 90 0F 10 44 24 30 90 90 90 90

detachcamera_aob3:
  db 90 90 90 90 0F 10 44 24 50 F3 0F 11 4D F8 90 90 90 90

{$lua}

function checkKeys()
  if syntaxcheck then return end
  if not (getForegroundProcess() == getOpenedProcessID()) then return end -- Only run if in game
  if (getAddressSafe("[[Atelier_Sophie_2.exe+183EA48]]")) and (getAddressSafe("memorybuffer")) then

    --Read and assign speed modifier value
    local speed = readFloat("speedModifier")
    local use_mouse = readFloat("useMouse")
    --If mouse control is enabled in-game, disable mouse control in freecam mode
    if (readByte("Atelier_Sophie_2.exe+18E9B09") &gt; 0) then
      use_mouse = 0
      writeByte("Atelier_Sophie_2.exe+18E9B09",00)
    end
    local mouse_speed = readFloat("mouseSensitivity")

    --Camera Coordinates
    local camx = readFloat("[[Atelier_Sophie_2.exe+183EA48]]+10") -- Camera X
    local camy = readFloat("[[Atelier_Sophie_2.exe+183EA48]]+18") -- Camera Y
    local camz = readFloat("[[Atelier_Sophie_2.exe+183EA48]]+14") -- Camera Z

    --Target Coordinates
    local targetx = readFloat("[[Atelier_Sophie_2.exe+183EA48]]+20") -- Target X
    local targety = readFloat("[[Atelier_Sophie_2.exe+183EA48]]+28") -- Target Y
    local targetz = readFloat("[[Atelier_Sophie_2.exe+183EA48]]+24") -- Target Z

    --Prevent endless error loop if camera status is not initiated
    if (targetx == nil) or (targetz == camz and targetx == camx and targety == camy) then
      speed = 0
      camx = 0
      camy = 0
      camz = 0
      targetx = 0
      targety = 0
      targetz = 0
    else
      local new_mouse_x,new_mouse_y = getMousePos()
      local mouse_loaded = readInteger("memorybuffer+38")

      --Initialize mouse coordinates on first run (if using mouse)
      if not (mouse_loaded == 1) and (use_mouse == 1) then
        new_mouse_x = math.ceil(getScreenWidth() / 32)
        new_mouse_y = math.ceil(getScreenHeight() / 32)
        setMousePos(math.ceil(getScreenWidth() / 32), math.ceil(getScreenHeight() / 32))
        writeInteger("memorybuffer+38",1)
      end

      --Measure mouse movement from previous cycle
      local mouse_move_x = new_mouse_x - math.ceil(getScreenWidth() / 32)
      local mouse_move_y = new_mouse_y - math.ceil(getScreenHeight() / 32)

      --Try to determine if the game engine is moving the mouse, and discard values if detected
      if mouse_move_x &gt; math.abs(math.ceil(getScreenWidth() / 4)) then mouse_move_x = 0 end
      if mouse_move_y &gt; math.abs(math.ceil(getScreenHeight() / 4)) then mouse_move_y = 0 end

      --Calculate tilt, pan and distance to target from the two sets of coordinates
      local camdist = ((targetx - camx)^2 + (targety - camy)^2 + (targetz - camz)^2)^0.5
      local tilt = math.atan2(camz - targetz, ((targetx - camx)^2 + (targety - camy)^2)^0.5)
      local pan = math.atan2(targetx - camx, targety - camy) + math.rad(180) -- Horizontal (pan)

      --Sine and Cosine of Rotation Values
      local siny = math.sin(pan) -- Sine of Horizontal (pan)
      local cosy = math.cos(pan) -- Cosine of Horizontal (pan)
      local sinp = math.sin(tilt) -- Sine of Vertical (tilt)
      local cosp = math.cos(tilt) -- Cosine of Vertical (tilt)

      --Forward
      if isKeyPressed(VK_NUMPAD8) then
        camx = camx - (siny * speed * 3)
        camy = camy - (cosy * speed * 3)
        camz = camz - (sinp * speed * 3)
      end
      --Left
      if isKeyPressed(VK_NUMPAD4) then
        camx = camx + (math.sin(pan - math.rad(90)) * speed * 3)
        camy = camy + (math.cos(pan - math.rad(90)) * speed * 3)
      end
      --Back
      if isKeyPressed(VK_NUMPAD5) then
        camx = camx + (siny * speed * 3)
        camy = camy + (cosy * speed * 3)
        camz = camz + (sinp * speed * 3)
      end
      --Right
      if isKeyPressed(VK_NUMPAD6) then
        camx = camx - (math.sin(pan - math.rad(90)) * speed * 3)
        camy = camy - (math.cos(pan - math.rad(90)) * speed * 3)
      end
      --Forward/Right
      if isKeyPressed(VK_NUMPAD8) and isKeyPressed(VK_NUMPAD6) then
        camx = camx - (math.sin(pan - math.rad(45)) * speed * 3)
        camy = camy - (math.cos(pan - math.rad(45)) * speed * 3)
        camz = camz - (sinp * speed * 3)
      end
      --Forward/Left
      if isKeyPressed(VK_NUMPAD8) and isKeyPressed(VK_NUMPAD4) then
        camx = camx - (math.sin(pan + math.rad(45)) * speed * 3)
        camy = camy - (math.cos(pan + math.rad(45)) * speed * 3)
        camz = camz - (sinp * speed * 3)
      end
      --Back/Left
      if isKeyPressed(VK_NUMPAD5) and isKeyPressed(VK_NUMPAD4) then
        camx = camx + (math.sin(pan - math.rad(45)) * speed * 3)
        camy = camy + (math.cos(pan - math.rad(45)) * speed * 3)
        camz = camz + (sinp * speed * 3)
      end
      --Back/Right
      if isKeyPressed(VK_NUMPAD5) and isKeyPressed(VK_NUMPAD6) then
        camx = camx + (math.sin(pan + math.rad(45)) * speed * 3)
        camy = camy + (math.cos(pan + math.rad(45)) * speed * 3)
        camz = camz + (sinp * speed * 3)
      end
      --Up
      if isKeyPressed(VK_SUBTRACT) then
       camz = camz + (speed * 2)
      end
      --Down
      if isKeyPressed(VK_ADD) then
       camz = camz - (speed * 2)
      end
      --Pan right
      if isKeyPressed(VK_NUMPAD9) then
        pan = pan - speed * 0.01
      end
      --Pan left
      if isKeyPressed(VK_NUMPAD7) then
        pan = pan + speed * 0.01
      end
      --Tilt up
      if isKeyPressed(VK_NUMPAD3) then
        tilt = math.max(tilt - speed * 0.01, math.rad(-89.5))
      end
      --Tilt down
      if isKeyPressed(VK_DECIMAL) then
        tilt = math.min(tilt + speed * 0.01, math.rad(89.5))
      end

      if (use_mouse == 1) then
        --Tilt by mouse
        if not(mouse_move_y == 0) then
          tilt = math.min(math.max(tilt + mouse_move_y * mouse_speed * 0.0003, math.rad(-89.5)), math.rad(89.5))
        end
        --Pan by mouse
        if not(mouse_move_x == 0) then
          pan = pan - mouse_move_x * mouse_speed * 0.0003
        end

        setMousePos(math.ceil(getScreenWidth() / 32), math.ceil(getScreenHeight() / 32))
      end

      --Create a copy of the entire memory block before alterations.  I do not know if +1C or +2C are used, but this preserves them.
      copyMemory("[[Atelier_Sophie_2.exe+183EA48]]+10",32,"memorybuffer+10")

      --Write new values into the temporary buffer
      writeFloat("memorybuffer+10", camx)
      writeFloat("memorybuffer+18", camy)
      writeFloat("memorybuffer+14", camz)
      writeFloat("memorybuffer+20", camx - (camdist * math.cos(tilt) * math.sin(pan)))
      writeFloat("memorybuffer+28", camy - (camdist * math.cos(tilt) * math.cos(pan)))
      writeFloat("memorybuffer+24", camz - (camdist * math.sin(tilt)))

      --Copy buffer back into memory read by game engine
      copyMemory("memorybuffer+10",32,"[[Atelier_Sophie_2.exe+183EA48]]+10")

      --Teleport to where the camera is looking
      if isKeyPressed(VK_DIVIDE) then
        copyMemory("memorybuffer+20",12,"[[[[Atelier_Sophie_2.exe+183EA78]+28]]+8]+28")
      end
    end

    --Speed Modifiers
    if isKeyPressed(VK_F3) then --If F3 is pressed, quadruple the speed
      writeFloat("speedModifier", 12)
    elseif isKeyPressed(VK_F2) then --If F2 is pressed, double the speed
      writeFloat("speedModifier", 6)
    elseif isKeyPressed(VK_F1) then --If F1 is pressed, slow way down
      writeFloat("speedModifier", .5)
    else --If nothing is pressed, speed is normal
      writeFloat("speedModifier", 3)
    end

    --Mouse Support
    if isKeyPressed(VK_PRIOR) then --If Page Up is pressed, enable mouse
      writeFloat("useMouse", 1)
    elseif isKeyPressed(VK_NEXT) then --If Page Down is pressed, disable mouse
      writeFloat("useMouse", 0)
    end
  end
end

t=createTimer(nil)
timer_setInterval(t, 10)
timer_onTimer(t, checkKeys)
timer_setEnabled(t, true)

{$asm}

[DISABLE]

{$lua}

timer_setEnabled(t, false)
writeByte("Atelier_Sophie_2.exe+18E9B09",01)

{$asm}

detachcamera_aob:
  db 41 0F 11 46 10 0F 10 45 88 41 0F 11 46 20

detachcamera_aob2:
  db 0F 11 46 10 0F 10 44 24 30 0F 11 46 20

detachcamera_aob3:
  db 0F 11 46 10 0F 10 44 24 50 F3 0F 11 4D F8 0F 11 46 20

unregistersymbol(detachcamera_aob)
unregistersymbol(detachcamera_aob2)
unregistersymbol(detachcamera_aob3)
unregistersymbol(memorybuffer)
dealloc(newmem)

{
// AOBs provided to help search for pointers; the addresses move so AOB injections
// for obtaining memory addresses doesn't work.  Use these injections in front of
// the stairs in the Commercial District (near the Crystal Sparkle Pavilion).
// As of v1.08, at +4D42FD, [[Atelier_Sophie_2.exe+183EA48]] is copied into rax,
// and at +77E3D0 [[[[Atelier_Sophie_2.exe+183EA78]+28]]+8] is copied into rax.

// ORIGINAL CODE - INJECTION POINT: Atelier_Sophie_2.exe+4D42FD

Atelier_Sophie_2.exe+4D42D2: FF 90 88 00 00 00        - call qword ptr [rax+00000088]
Atelier_Sophie_2.exe+4D42D8: B8 01 00 00 00           - mov eax,00000001
Atelier_Sophie_2.exe+4D42DD: F0 0F C1 83 48 01 00 00  - lock xadd [rbx+00000148],eax
Atelier_Sophie_2.exe+4D42E5: FF C0                    - inc eax
Atelier_Sophie_2.exe+4D42E7: 83 E8 01                 - sub eax,01
Atelier_Sophie_2.exe+4D42EA: 79 B8                    - jns Atelier_Sophie_2.exe+4D42A4
Atelier_Sophie_2.exe+4D42EC: E9 93 01 00 00           - jmp Atelier_Sophie_2.exe+4D4484
Atelier_Sophie_2.exe+4D42F1: 48 8B 06                 - mov rax,[rsi]
Atelier_Sophie_2.exe+4D42F4: 0F 10 50 10              - movups xmm2,[rax+10]
Atelier_Sophie_2.exe+4D42F8: 0F 11 54 24 20           - movups [rsp+20],xmm2
// ---------- INJECTING HERE ----------
Atelier_Sophie_2.exe+4D42FD: 48 8B 06                 - mov rax,[rsi]
// ---------- DONE INJECTING  ----------
Atelier_Sophie_2.exe+4D4300: 0F 10 40 20              - movups xmm0,[rax+20]
Atelier_Sophie_2.exe+4D4304: 0F 2E D0                 - ucomiss xmm2,xmm0
Atelier_Sophie_2.exe+4D4307: 0F 11 44 24 38           - movups [rsp+38],xmm0
Atelier_Sophie_2.exe+4D430C: 7A 33                    - jp Atelier_Sophie_2.exe+4D4341
Atelier_Sophie_2.exe+4D430E: 75 31                    - jne Atelier_Sophie_2.exe+4D4341
Atelier_Sophie_2.exe+4D4310: F3 0F 10 44 24 24        - movss xmm0,[rsp+24]
Atelier_Sophie_2.exe+4D4316: 0F 2E 44 24 3C           - ucomiss xmm0,[rsp+3C]
Atelier_Sophie_2.exe+4D431B: 7A 24                    - jp Atelier_Sophie_2.exe+4D4341
Atelier_Sophie_2.exe+4D431D: 75 22                    - jne Atelier_Sophie_2.exe+4D4341
Atelier_Sophie_2.exe+4D431F: F3 0F 10 44 24 28        - movss xmm0,[rsp+28]

// ORIGINAL CODE - INJECTION POINT: Atelier_Sophie_2.exe+77E3D4 - Sophie's Coordinates

Atelier_Sophie_2.exe+77E3B9: 66 83 63 10 FD        - and word ptr [rbx+10],-03
Atelier_Sophie_2.exe+77E3BE: 66 83 4B 10 01        - or word ptr [rbx+10],01
Atelier_Sophie_2.exe+77E3C3: 48 89 43 40           - mov [rbx+40],rax
Atelier_Sophie_2.exe+77E3C7: 48 83 C4 20           - add rsp,20
Atelier_Sophie_2.exe+77E3CB: 5B                    - pop rbx
Atelier_Sophie_2.exe+77E3CC: C3                    - ret 
Atelier_Sophie_2.exe+77E3CD: CC                    - int 3 
Atelier_Sophie_2.exe+77E3CE: CC                    - int 3 
Atelier_Sophie_2.exe+77E3CF: CC                    - int 3 
Atelier_Sophie_2.exe+77E3D0: 48 8B 41 08           - mov rax,[rcx+08]
// ---------- INJECTING HERE ----------
Atelier_Sophie_2.exe+77E3D4: 0F 10 40 28           - movups xmm0,[rax+28]
// ---------- DONE INJECTING  ----------
Atelier_Sophie_2.exe+77E3D8: 48 8B C2              - mov rax,rdx
Atelier_Sophie_2.exe+77E3DB: 0F 11 02              - movups [rdx],xmm0
Atelier_Sophie_2.exe+77E3DE: C7 42 0C 00 00 00 00  - mov [rdx+0C],00000000
Atelier_Sophie_2.exe+77E3E5: C3                    - ret 
Atelier_Sophie_2.exe+77E3E6: CC                    - int 3 
Atelier_Sophie_2.exe+77E3E7: CC                    - int 3 
Atelier_Sophie_2.exe+77E3E8: CC                    - int 3 
Atelier_Sophie_2.exe+77E3E9: CC                    - int 3 
Atelier_Sophie_2.exe+77E3EA: CC                    - int 3 
Atelier_Sophie_2.exe+77E3EB: CC                    - int 3 

// ORIGINAL CODE - INJECTION POINT: Atelier_Sophie_2.exe+62DE88 - Detach Camera

Atelier_Sophie_2.exe+62DE50: F3 0F 10 44 24 74           - movss xmm0,[rsp+74]
Atelier_Sophie_2.exe+62DE56: F3 0F 11 45 8C              - movss [rbp-74],xmm0
Atelier_Sophie_2.exe+62DE5B: F3 0F 10 44 24 64           - movss xmm0,[rsp+64]
Atelier_Sophie_2.exe+62DE61: F3 0F 11 44 24 54           - movss [rsp+54],xmm0
Atelier_Sophie_2.exe+62DE67: F3 0F 11 4D D0              - movss [rbp-30],xmm1
Atelier_Sophie_2.exe+62DE6C: F3 0F 10 4C 24 78           - movss xmm1,[rsp+78]
Atelier_Sophie_2.exe+62DE72: F3 0F 11 4D 90              - movss [rbp-70],xmm1
Atelier_Sophie_2.exe+62DE77: F3 0F 10 4C 24 68           - movss xmm1,[rsp+68]
Atelier_Sophie_2.exe+62DE7D: F3 0F 11 4C 24 58           - movss [rsp+58],xmm1
Atelier_Sophie_2.exe+62DE83: 0F 10 44 24 50              - movups xmm0,[rsp+50]
// ---------- INJECTING HERE ----------
Atelier_Sophie_2.exe+62DE88: 41 0F 11 46 10              - movups [r14+10],xmm0
Atelier_Sophie_2.exe+62DE8D: 0F 10 45 88                 - movups xmm0,[rbp-78]
Atelier_Sophie_2.exe+62DE91: 41 0F 11 46 20              - movups [r14+20],xmm0
// ---------- DONE INJECTING  ----------
Atelier_Sophie_2.exe+62DE96: E8 95 63 E2 FF              - call Atelier_Sophie_2.exe+454230
Atelier_Sophie_2.exe+62DE9B: 48 8B 06                    - mov rax,[rsi]
Atelier_Sophie_2.exe+62DE9E: 44 0F 28 B4 24 40 01 00 00  - movaps xmm14,[rsp+00000140]
Atelier_Sophie_2.exe+62DEA7: 44 0F 28 AC 24 50 01 00 00  - movaps xmm13,[rsp+00000150]
Atelier_Sophie_2.exe+62DEB0: 44 0F 28 A4 24 60 01 00 00  - movaps xmm12,[rsp+00000160]
Atelier_Sophie_2.exe+62DEB9: 80 B8 00 04 00 00 00        - cmp byte ptr [rax+00000400],00
Atelier_Sophie_2.exe+62DEC0: 44 0F 28 9C 24 70 01 00 00  - movaps xmm11,[rsp+00000170]
Atelier_Sophie_2.exe+62DEC9: 44 0F 28 94 24 80 01 00 00  - movaps xmm10,[rsp+00000180]

// ORIGINAL CODE - INJECTION POINT: Atelier_Sophie_2.exe+62CE58 - Detach Camera 2 (Cutscenes)

Atelier_Sophie_2.exe+62CE1A: F3 0F 11 4C 24 34           - movss [rsp+34],xmm1
Atelier_Sophie_2.exe+62CE20: F3 0F 11 54 24 38           - movss [rsp+38],xmm2
Atelier_Sophie_2.exe+62CE26: C7 44 24 3C 00 00 80 3F     - mov [rsp+3C],3F800000
Atelier_Sophie_2.exe+62CE2E: F3 0F 11 7C 24 50           - movss [rsp+50],xmm7
Atelier_Sophie_2.exe+62CE34: 48 8D 4E 08                 - lea rcx,[rsi+08]
Atelier_Sophie_2.exe+62CE38: F3 44 0F 11 4C 24 54        - movss [rsp+54],xmm9
Atelier_Sophie_2.exe+62CE3F: 48 8D 54 24 40              - lea rdx,[rsp+40]
Atelier_Sophie_2.exe+62CE44: F3 44 0F 11 54 24 58        - movss [rsp+58],xmm10
Atelier_Sophie_2.exe+62CE4B: C7 44 24 5C 00 00 80 3F     - mov [rsp+5C],3F800000
Atelier_Sophie_2.exe+62CE53: 0F 10 44 24 50              - movups xmm0,[rsp+50]
// ---------- INJECTING HERE ----------
Atelier_Sophie_2.exe+62CE58: 0F 11 46 10                 - movups [rsi+10],xmm0
// ---------- DONE INJECTING  ----------
Atelier_Sophie_2.exe+62CE5C: 0F 10 44 24 30              - movups xmm0,[rsp+30]
Atelier_Sophie_2.exe+62CE61: 0F 11 46 20                 - movups [rsi+20],xmm0
Atelier_Sophie_2.exe+62CE65: E8 C6 73 E2 FF              - call Atelier_Sophie_2.exe+454230
Atelier_Sophie_2.exe+62CE6A: 44 0F 28 94 24 F0 00 00 00  - movaps xmm10,[rsp+000000F0]
Atelier_Sophie_2.exe+62CE73: 44 0F 28 8C 24 00 01 00 00  - movaps xmm9,[rsp+00000100]
Atelier_Sophie_2.exe+62CE7C: 0F 28 BC 24 20 01 00 00     - movaps xmm7,[rsp+00000120]
Atelier_Sophie_2.exe+62CE84: 4C 8D 9C 24 40 01 00 00     - lea r11,[rsp+00000140]
Atelier_Sophie_2.exe+62CE8C: B0 01                       - mov al,01
Atelier_Sophie_2.exe+62CE8E: 49 8B 5B 10                 - mov rbx,[r11+10]
Atelier_Sophie_2.exe+62CE92: 49 8B 73 18                 - mov rsi,[r11+18]

// ORIGINAL CODE - INJECTION POINT: Atelier_Sophie_2.exe+629BC2 - Detach Camera 3 (Photo Mode)

Atelier_Sophie_2.exe+629B8E: F3 44 0F 11 4C 24 50        - movss [rsp+50],xmm9
Atelier_Sophie_2.exe+629B95: F3 0F 58 D0                 - addss xmm2,xmm0
Atelier_Sophie_2.exe+629B99: F3 44 0F 11 44 24 54        - movss [rsp+54],xmm8
Atelier_Sophie_2.exe+629BA0: F3 0F 10 45 D8              - movss xmm0,[rbp-28]
Atelier_Sophie_2.exe+629BA5: F3 0F 59 C7                 - mulss xmm0,xmm7
Atelier_Sophie_2.exe+629BA9: F3 0F 11 74 24 58           - movss [rsp+58],xmm6
Atelier_Sophie_2.exe+629BAF: F3 0F 11 5D F0              - movss [rbp-10],xmm3
Atelier_Sophie_2.exe+629BB4: F3 0F 58 C8                 - addss xmm1,xmm0
Atelier_Sophie_2.exe+629BB8: F3 0F 11 55 F4              - movss [rbp-0C],xmm2
Atelier_Sophie_2.exe+629BBD: 0F 10 44 24 60              - movups xmm0,[rsp+60]
// ---------- INJECTING HERE ----------
Atelier_Sophie_2.exe+629BC2: 0F 11 46 10                 - movups [rsi+10],xmm0
// ---------- DONE INJECTING  ----------
Atelier_Sophie_2.exe+629BC6: 0F 10 44 24 50              - movups xmm0,[rsp+50]
Atelier_Sophie_2.exe+629BCB: F3 0F 11 4D F8              - movss [rbp-08],xmm1
Atelier_Sophie_2.exe+629BD0: 0F 11 46 20                 - movups [rsi+20],xmm0
Atelier_Sophie_2.exe+629BD4: E8 57 A6 E2 FF              - call Atelier_Sophie_2.exe+454230
Atelier_Sophie_2.exe+629BD9: 80 BF 00 04 00 00 00        - cmp byte ptr [rdi+00000400],00
Atelier_Sophie_2.exe+629BE0: 44 0F 28 A4 24 40 01 00 00  - movaps xmm12,[rsp+00000140]
Atelier_Sophie_2.exe+629BE9: 44 0F 28 9C 24 50 01 00 00  - movaps xmm11,[rsp+00000150]
Atelier_Sophie_2.exe+629BF2: 44 0F 28 94 24 60 01 00 00  - movaps xmm10,[rsp+00000160]
Atelier_Sophie_2.exe+629BFB: 44 0F 28 8C 24 70 01 00 00  - movaps xmm9,[rsp+00000170]
Atelier_Sophie_2.exe+629C04: 44 0F 28 84 24 80 01 00 00  - movaps xmm8,[rsp+00000180]

// ORIGINAL CODE - INJECTION POINT: Atelier_Sophie_2.exe+6F1F68 - Mouse Control

Atelier_Sophie_2.exe+6F1F4C: CC                    - int 3 
Atelier_Sophie_2.exe+6F1F4D: CC                    - int 3 
Atelier_Sophie_2.exe+6F1F4E: CC                    - int 3 
Atelier_Sophie_2.exe+6F1F4F: CC                    - int 3 
Atelier_Sophie_2.exe+6F1F50: 48 83 EC 28           - sub rsp,28
Atelier_Sophie_2.exe+6F1F54: 80 3D AE 7B 1F 01 00  - cmp byte ptr [Atelier_Sophie_2.exe+18E9B09],00
Atelier_Sophie_2.exe+6F1F5B: 74 34                 - je Atelier_Sophie_2.exe+6F1F91
Atelier_Sophie_2.exe+6F1F5D: 80 3D A4 7B 1F 01 00  - cmp byte ptr [Atelier_Sophie_2.exe+18E9B08],00
Atelier_Sophie_2.exe+6F1F64: 74 2B                 - je Atelier_Sophie_2.exe+6F1F91
Atelier_Sophie_2.exe+6F1F66: 33 C9                 - xor ecx,ecx
// ---------- INJECTING HERE ----------
Atelier_Sophie_2.exe+6F1F68: FF 15 A2 18 68 00     - call qword ptr [Atelier_Sophie_2.exe+D73810]
// ---------- DONE INJECTING  ----------
Atelier_Sophie_2.exe+6F1F6E: 8B 0D 98 7B 1F 01     - mov ecx,[Atelier_Sophie_2.exe+18E9B0C]
Atelier_Sophie_2.exe+6F1F74: 8B 15 96 7B 1F 01     - mov edx,[Atelier_Sophie_2.exe+18E9B10]
Atelier_Sophie_2.exe+6F1F7A: 85 C9                 - test ecx,ecx
Atelier_Sophie_2.exe+6F1F7C: 75 04                 - jne Atelier_Sophie_2.exe+6F1F82
Atelier_Sophie_2.exe+6F1F7E: 85 D2                 - test edx,edx
Atelier_Sophie_2.exe+6F1F80: 74 08                 - je Atelier_Sophie_2.exe+6F1F8A
Atelier_Sophie_2.exe+6F1F82: 45 33 C0              - xor r8d,r8d
Atelier_Sophie_2.exe+6F1F85: E8 86 F9 FF FF        - call Atelier_Sophie_2.exe+6F1910
Atelier_Sophie_2.exe+6F1F8A: C6 05 77 7B 1F 01 00  - mov byte ptr [Atelier_Sophie_2.exe+18E9B08],00
Atelier_Sophie_2.exe+6F1F91: 48 83 C4 28           - add rsp,28
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>96</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
          <DeactivateSound>Deactivate</DeactivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <Comments>Camera Movement Algorithm adapted from Cyber's CS4 free camera script.
</Comments>
</CheatTable>
